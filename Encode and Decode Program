package EncodeDecode;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Scanner;

class Operation {

}

public class Encoding {
	static PrintWriter encodedFile, decodedFile;

	public static void main(String[] args) throws IOException{
		
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		

		String[] alpha = { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r",
										"s", "t", "u", "v", "w", "x", "y", "z","0","1","2","3","4","5","6","7","8","9",
										" ","!","@","#","$","%","^","`","&","(",")",":",",",".","?","/","|","=","<",">","-","_","*","+","~","A","B","C","D","E","F","G","I","J","K","L","M",
										"N","O","P","Q","R","S","T","U","V","W","X","Y","Z"};

		String[][] pat = new String[alpha.length][alpha.length]; // Alphabets Pattern Table
		
		
		
		//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		 
			// Declaring the alphabets Table in matrix

			for (int i = 0; i < alpha.length; i++) {
				int y = -1; // Y is used to specify the column to allocate alphabets

				for (int j = i; j < alpha.length; j++) { // For First Pyramid

					y++;
					pat[i][y] = alpha[j];
//					 System.out.print(alpha[j]);     //This is used to Print the Half pyramid

				}

				for (int k = 0; k < i; k++) { // For Second Pyramid
					y++;
					if (k < i + 1) {
						pat[i][y] = alpha[k];
//						 System.out.print(alpha[k]); 			// This is used to Print the Second Pyramid
					}
				}

//				System.out.println("");
			}

			// Displaying the Matrix

//			 for (int i1 = 0; i1 < alpha.length; i1++) {
//			 for (int j = 0; j < alpha.length; j++) {
//			
//			 System.out.print(pat[i1][j]);
//			 }
//			 System.out.println("");
//			 }
//			 
	
		//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		
		
			 int opt;
				do {
					
				
					
					 
					 System.out.println("\nEnter your Option\n \n1. File Operation \n2. Text Operation \n3. Exit");
					 System.out.print("\nYour Option : ");
										 
					 opt = Integer.parseInt(br.readLine());
					 
						System.out.println("\nEnter the secret Word");
						String[] sec = br.readLine().split("");
					 					 
					 switch (opt) {				
						 
		//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
					 
					 case 1:
				 {
					 System.out.println("\n1. Encode\n2. Decode\n");
					 int value = Integer.parseInt(br.readLine());
					 
					 if(value == 1) {
 			
				encodedFile = new PrintWriter("EncodedFile.txt");
				
				File file = new File("outputFile.txt");

				String text = null;
				
				if (file.exists()) {
					Scanner inputFile = new Scanner (file);
					
					while (inputFile.hasNext())
					{
						text = inputFile.nextLine();
						String m= text;	
						
						String[] mes = m.split("");					
						

//						 Encoding Operation

						int[] secretmap = new int[sec.length];
						for(int i =0 ; i< sec.length; i++)
						{
							for(int j =0 ; j< alpha.length; j++)
							{
//								System.out.print(pat[j][0]);
								
//					 it shows the char location of secret word in row order
								
								if (sec[i].equals(pat[j][0]) ) {
									secretmap[i] = j; 
//									System.out.println(secmap[i]);  
								}
							}
						}
//					 to find the char location of the message in column order 	
						
						int[] mesmap = new int[mes.length];
						for(int i =0 ; i< mes.length; i++)
						{
							for(int j =0 ; j< alpha.length; j++)
							{
//								System.out.print(pat[j][0]);
								if (mes[i].equals(pat[0][j]) ) {
									mesmap[i] = j; 
//									System.out.println(mesmap[i]);    // it shows the char location of secret word in row order
								}
							}
						}
						
//						making the secretmap array size equal to mesmap array size
						
						int i=0,j=0;
						int[] secmap = new int[mes.length];  
//								
						while( i<mes.length)
						{
							if(j==secretmap.length)
								j=0;
							secmap[i] = secretmap[j];
//							System.out.println(secmap[i]);
							i++;
							j++;
						}
						
//						Operation to find the intersection point in the table	
						
						int r=0, c=0;
						String[] enc = new String[mes.length];
						
						for(i =0 ; i<mes.length; i++)
						{
							r= mesmap[i];
							c= secmap[i];
							
							enc[i] = pat[r][c]; // assining the char to enc array
							
						}
						
//						Displaying the encoded text
						
//						System.out.println("\nThe Encoded Message is\n");
						String temp = null;
						for(String t: enc)
//				           System.out.print(t);
				       {
				           temp += t;
				       }
//				       System.out.println("\n\nThank You");
				       String res = temp.replace("null","");
				       encodedFile.println(res);
				       
					}
					inputFile.close();
				}
				else System.out.println("Please Enter the vaild File Name ");		
				
				
				encodedFile.close();
								
//		       encodedFile.println(text);
				
				System.out.println("Successfull");
				break;
					 }
					 
		//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
						
		//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
									
					 else
					 {
						
						 
						 decodedFile = new PrintWriter("DecodedFile.txt");
							
							File file = new File("encodedFile.txt");

							String text = null;
							
							if (file.exists()) {
								Scanner inputFile = new Scanner (file);
								
								while (inputFile.hasNext())
								{
									text = inputFile.nextLine();
									 String d = text;
									 
										String[] dec = d.split("");						
										
										int[] secretmap = new int[sec.length];
										for(int i =0 ; i< sec.length; i++)
										{
											for(int j =0 ; j< alpha.length; j++)
											{
															
//									 it shows the char location of secret word in row order
												
												if (sec[i].equals(pat[j][0]) ) {
													secretmap[i] = j; 
//													System.out.println(secmap[i]);  
												}
											}
										}
									
//										making the secretmap array size equal to decmap array size
										
										int i=0,j=0;
										int[] secmap = new int[dec.length];  
//												
										while( i<dec.length)
										{
											if(j==secretmap.length)
												j=0;
											secmap[i] = secretmap[j];
//											System.out.println(secmap[i]);
											i++;
											j++;
										}
										 
//										 it shows the encoded char location of secret word in column order
										
										int[] decmap = new int[dec.length];
										for(int i1 =0 ; i1< dec.length; i1++)
										{
											int k =secmap[i1];
											for(int j1 =0 ; j1< alpha.length; j1++)
											{
												
//												System.out.print(pat[j][0]);
												if (dec[i1].equals(pat[k][j1]) ) {
													decmap[i1] = j1; 
//													System.out.println(decmap[i1]);    // it shows the char location of secret word in row order
												}
											}
										}
										
//										Operation to find the column point in the table	
										
										int r=0, c=0;
										String[] decrypt = new String[dec.length];
										
										for(i =0 ; i<dec.length; i++)
										{
											c= decmap[i];
											
											
											decrypt[i] = pat[0][c]; // assining the char to decrypt array
											
										}
										
//										Displaying the encoded text
										
//										System.out.println("\nThe Encoded Message is\n");
										
										 String temp = null;
										for(String t: decrypt)
						                    {
						                        temp += t;
						                    }
						                    String res = temp.replace("null","");
						                    decodedFile.println(res);
									
								}
								inputFile.close();
							}
							else System.out.println("Please Enter the vaild File Name ");
							
							decodedFile.close();
							
							
					
					 System.out.println("\n\nSuccessfull");
					 break;
						 
					 }
				}
				 
		//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
				
		//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
					
					 case 2:
					 {
						 
						 System.out.println("\n1. Encode\n2. Decode\n");
						 System.out.print("Your choice : ");
						 int value = Integer.parseInt(br.readLine());
						 
						 if(value == 1) {
							 
								// Getting the Message from user to Encode

								System.out.println("\nEnter the Message to Encode");
								String m= br.readLine();		
								
								String[] mes = m.split("");
							
//								 Encoding Operation

								int[] secretmap = new int[sec.length];
								for(int i =0 ; i< sec.length; i++)
								{
									for(int j =0 ; j< alpha.length; j++)
									{
//										System.out.print(pat[j][0]);
										
//							 it shows the char location of secret word in row order
										
										if (sec[i].equals(pat[j][0]) ) {
											secretmap[i] = j; 
//											System.out.println(secmap[i]);  
										}
									}
								}
//							 to find the char location of the message in column order 	
								
								int[] mesmap = new int[mes.length];
								for(int i =0 ; i< mes.length; i++)
								{
									for(int j =0 ; j< alpha.length; j++)
									{
//										System.out.print(pat[j][0]);
										if (mes[i].equals(pat[0][j]) ) {
											mesmap[i] = j; 
//											System.out.println(mesmap[i]);    // it shows the char location of secret word in row order
										}
									}
								}
								
//								making the secretmap array size equal to mesmap array size
								
								int i=0,j=0;
								int[] secmap = new int[mes.length];  
//										
								while( i<mes.length)
								{
									if(j==secretmap.length)
										j=0;
									secmap[i] = secretmap[j];
//									System.out.println(secmap[i]);
									i++;
									j++;
								}
								
//								Operation to find the intersection point in the table	
								
								int r=0, c=0;
								String[] enc = new String[mes.length];
								
								for(i =0 ; i<mes.length; i++)
								{
									r= mesmap[i];
									c= secmap[i];
									
									enc[i] = pat[r][c]; // assining the char to enc array
									
								}
								
//								Displaying the encoded text
								
								System.out.println("\nThe Original Message is\n");
								for(String t: enc)
								System.out.print(t);
								
								System.out.println("\n\nSuccessfull");
								break;
							 
						 }
						 
		//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
							
		//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
						 
						 
						 else {
							 
							 System.out.println("\nEnter the Encoded Message to Decode");
							 String d = br.readLine();
							 
							String[] dec = d.split("");						
							
							int[] secretmap = new int[sec.length];
							for(int i =0 ; i< sec.length; i++)
							{
								for(int j =0 ; j< alpha.length; j++)
								{
												
//						 it shows the char location of secret word in row order
									
									if (sec[i].equals(pat[j][0]) ) {
										secretmap[i] = j; 
//										System.out.println(secmap[i]);  
									}
								}
							}
						
//							making the secretmap array size equal to decmap array size
							
							int i=0,j=0;
							int[] secmap = new int[dec.length];  
//									
							while( i<dec.length)
							{
								if(j==secretmap.length)
									j=0;
								secmap[i] = secretmap[j];
//								System.out.println(secmap[i]);
								i++;
								j++;
							}
							 
//							 it shows the encoded char location of secret word in column order
							
							int[] decmap = new int[dec.length];
							for(int i1 =0 ; i1< dec.length; i1++)
							{
								int k =secmap[i1];
								for(int j1 =0 ; j1< alpha.length; j1++)
								{
									
//									System.out.print(pat[j][0]);
									if (dec[i1].equals(pat[k][j1]) ) {
										decmap[i1] = j1; 
//										System.out.println(decmap[i1]);    // it shows the char location of secret word in row order
									}
								}
							}
							
//							Operation to find the column point in the table	
							
							int r=0, c=0;
							String[] decrypt = new String[dec.length];
							
							for(i =0 ; i<dec.length; i++)
							{
								c= decmap[i];
								
								
								decrypt[i] = pat[0][c]; // assining the char to decrypt array
								
							}
							
//							Displaying the encoded text
							
							System.out.println("\nThe Encoded Message is\n");
							for(String t: decrypt)
							System.out.print(t);
						
						
						 System.out.println("\n\nSuccessfull");
						 break;
							 
						 }
						 
					 }
					 
		//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
						
		//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
					 case 3:
						 break;
					}
					 } while (opt !=3 ) ;		 
				 
				 
	}	
}
